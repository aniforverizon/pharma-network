cd ~/Desktop/pharma-network/network/

configtxgen -profile OrdererGenesis -channelID upgrad-sys-channel -outputBlock ./channel-artifacts/genesis.block
configtxgen -profile PharmaChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID pharmachannel
configtxgen -profile PharmaChannel -outputAnchorPeersUpdate ./channel-artifacts/manufacturerMSPanchors.tx -channelID pharmachannel -asOrg manufacturerMSP
configtxgen -profile PharmaChannel -outputAnchorPeersUpdate ./channel-artifacts/distributorMSPanchors.tx -channelID pharmachannel -asOrg distributorMSP
configtxgen -profile PharmaChannel -outputAnchorPeersUpdate ./channel-artifacts/retailerMSPanchors.tx -channelID pharmachannel -asOrg retailerMSP
configtxgen -profile PharmaChannel -outputAnchorPeersUpdate ./channel-artifacts/consumerMSPanchors.tx -channelID pharmachannel -asOrg consumerMSP
configtxgen -profile PharmaChannel -outputAnchorPeersUpdate ./channel-artifacts/transporterMSPanchors.tx -channelID pharmachannel -asOrg transporterMSP



peer channel create -o orderer.pharma-network.com:7050 -c pharmachannel -f ./channel-artifacts/channel.tx

peer channel join -b pharmachannel.block


docker rm $(docker ps -a -q)
docker rmi $(docker images |grep 'dev-peer')

docker exec -it chaincode /bin/bash

npm run start-dev


docker exec -it cli /bin/bash
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.manufacturer:registerCompany","MAN001","Sun Pharma","Chennai","Manufacturer"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.distributor:registerCompany","DIST001","VG pharma","Vizag","Distributor"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.retailer:registerCompany","RET002","upgrad","Mumbai","Retailer"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.retailer:registerCompany","TRA001","FedEx","Delhi","Transporter"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.retailer:registerCompany","TRA002","Blue Dart","Bangalore","Transporter"]}'

peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.manufacturer:addDrug","Paracetamol","001","01/06/2020","01/06/2025","MAN001"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.manufacturer:addDrug","Paracetamol","002","01/06/2020","01/06/2025","MAN001"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.manufacturer:addDrug","Paracetamol","003","01/06/2020","01/06/2025","MAN001"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.manufacturer:addDrug","Paracetamol","004","01/06/2020","01/06/2025","MAN001"]}'




peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.manufacturer:createShipment","DIST001","Paracetamol","[\"org.pharma-network.pharmanet.drugParacetamol001\"]","TRA001"]}'



docker exec -it cli /bin/bash

CORE_PEER_LOCALMSPID="distributorMSP"
CORE_PEER_ADDRESS=peer0.distributor.pharma-network.com:9051
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/distributor.pharma-network.com/users/Admin@distributor.pharma-network.com/msp


peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.distributor:createPO","MAN001","DIST001","TEST","1"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.distributor:createPO","DIST0011","MAN001","TEST","1"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.distributor:createPO","DIST001","MAN001","TEST","1"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.distributor:createPO","DIST001","MAN001","Paracetamol","1"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.distributor:createPO","DIST001","MAN001","Paracetamol","1"]}'




docker exec -it cli /bin/bash

CORE_PEER_LOCALMSPID="retailerMSP"
CORE_PEER_ADDRESS=peer0.retailer.pharma-network.com:11051
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/retailer.pharma-network.com/users/Admin@retailer.pharma-network.com/msp

peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.retailer:createPO","CRN-001","CRN-003","TEST","1"]}'
peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.retailer:createPO","MAN001","DIST001","TEST","1"]}'

docker exec -it cli /bin/bash

CORE_PEER_LOCALMSPID="transporterMSP"
CORE_PEER_ADDRESS=peer0.transporter.pharma-network.com:15051
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/transporter.pharma-network.com/users/Admin@transporter.pharma-network.com/msp

peer chaincode invoke -o orderer.pharma-network.com:7050 -C pharmachannel -n pharmanet -c '{"Args":["org.pharma-network.pharmanet.transporter:updateShipment","DIST001","Paracetamol","TRA001"]}'



# Network Setup

1. Pre-setup
	a. Generate Crypto Materials
		>> cryptogen generate --config=./crypto-config.yaml
	 b. Generate Channel Artifacts
	    >> configtxgen -profile OrdererGenesis -channelID upgrad-sys-channel -outputBlock ./channel-artifacts/genesis.block
	    >> configtxgen -profile CertificationChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID certificationchannel
	    >> configtxgen -profile CertificationChannel -outputAnchorPeersUpdate ./channel-artifacts/iitMSPanchors.tx -channelID certificationchannel -asOrg iitMSP
	    >> configtxgen -profile CertificationChannel -outputAnchorPeersUpdate ./channel-artifacts/mhrdMSPanchors.tx -channelID certificationchannel -asOrg mhrdMSP
	    >> configtxgen -profile CertificationChannel -outputAnchorPeersUpdate ./channel-artifacts/upgradMSPanchors.tx -channelID certificationchannel -asOrg upgradMSP

2. Docker Network Setup
	a. Start Docker Network
		>> docker-compose -f ./docker-compose.yml up -d

3. Fabric Network Setup
	a. SSH Into CLI Container
		>> docker exec -it cli /bin/bash
	b. Create Channel
		>> CORE_PEER_LOCALMSPID="iitMSP"
		>> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/iit.certification-network.com/users/Admin@iit.certification-network.com/msp
		>> CORE_PEER_ADDRESS=peer0.iit.certification-network.com:7051
		>> peer channel create -o orderer.certification-network.com:7050 -c certificationchannel -f ./channel-artifacts/channel.tx
	c. Join Peer 0 - IIT
		>> peer channel join -b certificationchannel.block
	d. Join Peer 1 - IIT
        >> CORE_PEER_ADDRESS=peer1.iit.certification-network.com:8051
        >> peer channel join -b certificationchannel.block
    e. Join Peer 0 - MHRD
        >> CORE_PEER_LOCALMSPID="mhrdMSP"
        >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/mhrd.certification-network.com/users/Admin@mhrd.certification-network.com/msp
        >> CORE_PEER_ADDRESS=peer0.mhrd.certification-network.com:9051
        >> peer channel join -b certificationchannel.block
    f. Join Peer 1 - MHRD
        >> CORE_PEER_ADDRESS=peer1.mhrd.certification-network.com:10051
        >> peer channel join -b certificationchannel.block
    g. Join Peer 0 - UPGRAD
        >> CORE_PEER_LOCALMSPID="upgradMSP"
        >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/upgrad.certification-network.com/users/Admin@upgrad.certification-network.com/msp
        >> CORE_PEER_ADDRESS=peer0.upgrad.certification-network.com:11051
        >> peer channel join -b certificationchannel.block
    h. Join Peer 1 - UPGRAD
        >> CORE_PEER_ADDRESS=peer1.upgrad.certification-network.com:12051
        >> peer channel join -b certificationchannel.block
    i. Update Anchor Peer for IIT
        >> CORE_PEER_LOCALMSPID="iitMSP"
        >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/iit.certification-network.com/users/Admin@iit.certification-network.com/msp
        >> CORE_PEER_ADDRESS=peer0.iit.certification-network.com:7051
        >> peer channel update -o orderer.certification-network.com:7050 -c certificationchannel -f ./channel-artifacts/iitMSPanchors.tx
    j. Update Anchor Peer for MHRD
        >> CORE_PEER_LOCALMSPID="mhrdMSP"
        >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/mhrd.certification-network.com/users/Admin@mhrd.certification-network.com/msp
        >> CORE_PEER_ADDRESS=peer0.mhrd.certification-network.com:9051
        >> peer channel update -o orderer.certification-network.com:7050 -c certificationchannel -f ./channel-artifacts/mhrdMSPanchors.tx
    k. Update Anchor Peer for UPGRAD
        >> CORE_PEER_LOCALMSPID="upgradMSP"
        >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/upgrad.certification-network.com/users/Admin@upgrad.certification-network.com/msp
        >> CORE_PEER_ADDRESS=peer0.upgrad.certification-network.com:11051
        >> peer channel update -o orderer.certification-network.com:7050 -c certificationchannel -f ./channel-artifacts/upgradMSPanchors.tx


# Install & Instantiate Chaincode

1. Run Chaincode in Dev Mode
	a. SSH Into Chaincode Container
    	>> docker exec -it chaincode /bin/bash
    b. Run Chaincode Node App In Dev Mode
        >> npm run start-dev

2. Install Chaincode
	a. SSH Into CLI Container
		>> docker exec -it cli /bin/bash
	b. Install Chaincode on Peer 0 - IIT
		>> CORE_PEER_LOCALMSPID="iitMSP"
        >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/iit.certification-network.com/users/Admin@iit.certification-network.com/msp
        >> CORE_PEER_ADDRESS=peer0.iit.certification-network.com:7051
        >> peer chaincode install -n certnet -v 1.1 -l node -p /opt/gopath/src/github.com/hyperledger/fabric/peer/chaincode/
    c. Install Chaincode on Peer 0 - MHRD
        >> CORE_PEER_LOCALMSPID="mhrdMSP"
        >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/mhrd.certification-network.com/users/Admin@mhrd.certification-network.com/msp
        >> CORE_PEER_ADDRESS=peer0.mhrd.certification-network.com:9051
        >> peer chaincode install -n certnet -v 1.1 -l node -p /opt/gopath/src/github.com/hyperledger/fabric/peer/chaincode/
    d. Install Chaincode on Peer 0 - UPGRAD
        >> CORE_PEER_LOCALMSPID="upgradMSP"
        >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/upgrad.certification-network.com/users/Admin@upgrad.certification-network.com/msp
        >> CORE_PEER_ADDRESS=peer0.upgrad.certification-network.com:11051
        >> peer chaincode install -n certnet -v 1.1 -l node -p /opt/gopath/src/github.com/hyperledger/fabric/peer/chaincode/

3. Instantiate Chaincode
	a. SSH Into CLI Container
		>> docker exec -it cli /bin/bash
	b. Instantiate Chaincode on Channel Using Peer 0 - IIT
		>> CORE_PEER_LOCALMSPID="iitMSP"
        >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/iit.certification-network.com/users/Admin@iit.certification-network.com/msp
        >> CORE_PEER_ADDRESS=peer0.iit.certification-network.com:7051
        >> peer chaincode instantiate -o orderer.certification-network.com:7050 -C certificationchannel -n certnet -l node -v 1.1 -c '{"Args":["org.certification-network.certnet:instantiate"]}' -P "OR ('iitMSP.member','mhrdMSP.member','upgradMSP.member')"

4. View Container Logs
	a. Start Peer 0 - IIT Container Logs
		>> docker logs -f peer0.iit.certification-network.com

5. Test Chaincode
	a. SSH Into Peer 0 - IIT
		>> docker exec -it peer0.iit.certification-network.com /bin/bash
	b. Invoke Create Student Function
		>> peer chaincode invoke -o orderer.certification-network.com:7050 -C certificationchannel -n certnet -c '{"Args":["org.certification-network.certnet:createStudent","0001","Aakash Bansal","connect@aakashbansal.com"]}'
	c. Invoke Get Student Function
		>> peer chaincode invoke -o orderer.certification-network.com:7050 -C certificationchannel -n certnet -c '{"Args":["org.certification-network.certnet:getStudent","0001"]}'




// Update all DRUG assets with new OWNER and shipment details
    for(var i=0;i<drugAssetsToBeUpdated.length;i++){
        drugAssetsToBeUpdated[i].shipment.push(shipmentID);
        await ctx.stub.putState(drugAssetsToBeUpdated[i].productID, Buffer.from(JSON.stringify(drugAssetsToBeUpdated[i])));
    }


//  Validate listOfAssets whether they exist on ledger or not and keep them handy for further updates after shipment
    let drugAssetsToBeUpdated = [];
    for(var i=0;i<listOfAssetsArray.length;i++){
        console.log("listOfAssetsArray[i]",listOfAssetsArray[i]);

        let drugAssetDataBuffer = await ctx.stub.getState(listOfAssetsArray[i]).catch(err => console.log(err));
        if (!drugAssetDataBuffer.toString()) {
            throw new Error('Invalid DRUG Asset ID : '+listOfAssetsArray[i]);
        }
        drugAssetsToBeUpdated.push(JSON.parse(drugAssetDataBuffer.toString()));
    }


    



		// let crnSearchResultsIterator = await stub.getStateByPartialCompositeKey('org.pharma-network.pharmanet.company', [buyerCRN]);
		// while(true){
		// 	let responseRange = await crnSearchResultsIterator.next();
		// 	if (!responseRange || !responseRange.value || !responseRange.value.key) {
		// 		break;
		// 	}

		// 	let objectType;
		// 	let attributes;
		// 	({
		// 		objectType,
		// 		attributes
		// 	} = await stub.splitCompositeKey(responseRange.value.key));
		// 	break;
		// }